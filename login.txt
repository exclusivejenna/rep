     //[HttpPost("login")]
     //        public IActionResult Login([FromBody] LoginRequestDto request)
     //        {
     //            try
     //            {
     //                // Decrypt incoming password
     //                string decryptedPassword = DecryptPassword(request.EncryptedPassword);
     //                // Hardcoded credentials for demonstration
     //                //if (request.UserName == "admin@gmail.com" && decryptedPassword == "AQAAAAIAAYagAAAAEPirYzJ5KLY+SxjG6t7daN7WOAH+bQ+2cO3AL/pS/VzkU6VZs8nBh4meEO5rXAyy+A==")
     //                //{
     //                    // Generate JWT token
     //                    string token = GenerateJwtToken(request.UserName);
     //                    return Ok(new { Token = token });
     //                //}
     //                return Unauthorized("Invalid credentials");
     //            }
     //            catch (Exception ex)
     //            {
     //                return StatusCode(500, new { Message = "An error occurred during login.", Details = ex.Message });
     //            }
     //        }

     //        private string DecryptPassword(string encryptedPassword)
     //        {
     //            if (!IsBase64String(encryptedPassword))
     //                throw new ArgumentException("Input is not a valid Base64 string.");

     //            var key = Encoding.UTF8.GetBytes(_jwtOptions.Secret);
     //            if (key.Length != 16)
     //                throw new ArgumentException("Encryption key must be 16 bytes long.");

     //            using (Aes aes = Aes.Create())
     //            {
     //                aes.Key = key;
     //                aes.Mode = CipherMode.CBC;
     //                aes.Padding = PaddingMode.PKCS7;

     //                var encryptedBytes = Convert.FromBase64String(encryptedPassword);
     //                var iv = new byte[16];
     //                Array.Copy(encryptedBytes, 0, iv, 0, 16);

     //                using (var decryptor = aes.CreateDecryptor(aes.Key, iv))
     //                {
     //                    var cipherText = new byte[encryptedBytes.Length - 16];
     //                    Array.Copy(encryptedBytes, 16, cipherText, 0, cipherText.Length);

     //                    var decryptedBytes = decryptor.TransformFinalBlock(cipherText, 0, cipherText.Length);
     //                    return Encoding.UTF8.GetString(decryptedBytes);
     //                }
     //            }
     //        }